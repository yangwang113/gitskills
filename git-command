【安装Git】
安装完成后，还需要最后一步设置，在命令行输入：
	git config --global user.name "Your Name"
	git config --global user.email "email@example.com"
	
初始化一个Git仓库，使用git init命令。
	git init

【创建版本库】
添加文件到Git仓库，分两步：
使用命令git add <file>，注意，可反复多次使用，添加多个文件；
	git add <file>
使用命令git commit -m <message>，完成。
	git commit -m <message>

【版本回退】
HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令
	git reset --hard commit_id。

穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
	git log

要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
	git reflog
	
【撤销修改】
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令
	git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，
第一步用命令git reset HEAD <file>，就回到了场景1，
	git reset HEAD <file>
第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

【删除文件】
命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容
	git rm filename

【添加远程库】
要关联一个远程库，使用命令
	git remote add origin git@server-name:path/repo-name.git；

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
	git push -u origin master

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
	git push origin master

【添加远程库】
要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
	git clone [path]

【创建与合并分支】
查看分支：
	git branch

创建分支：
	git branch <name>

切换分支：
	git checkout <name>
	git switch <name>

创建+切换分支：
	git checkout -b <name>
	git switch -c <name>

合并某分支到当前分支：
	git merge <name>
	
普通模式合并，合并后的历史有分支，能看出来曾经做过合并
	git merge --no-ff -m "change msg" branch-name

删除分支：
	git branch -d <name>

查看分支合并图
	git log --graph

【Bug分支】
保存工作现场
	git stash
查看保存的工作现场
	git stash list
恢复保存的工作现场
	git stash apply **
恢复后删除保存的工作现场
	git stash drop
直接恢复保存的工作现场并删除stash内容
	git stash pop

在master分支上修复的bug，想要合并到当前dev分支，可以用git cherry-pick <commit>命令，把bug提交的修改“复制”到当前分支，避免重复劳动
	git cherry-pick <commit>

如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
	git branch -D <name>

【多人协作】
首先，可以试图用git push origin <branch-name>推送自己的修改；

如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

如果合并有冲突，则解决冲突，并在本地提交；

没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！

如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。

这就是多人协作的工作模式，一旦熟悉了，就非常简单。

小结
查看远程库信息
	git remote -v

从本地推送分支
	git push origin branch-name，
	
如果推送失败，先用git pull抓取远程的新提交；
	git pull

在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
	git checkout -b branch-name origin/branch-name
	git switch -c branch-name origin/branch-name

建立本地分支和远程分支的关联，使用
	git branch --set-upstream branch-name origin/branch-name；

从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
	git pull
